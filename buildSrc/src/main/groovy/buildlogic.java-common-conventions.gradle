plugins {
    id 'java'
    id 'java-library'
}

configurations {
    include
    pluginImpl
    implementation.extendsFrom(include)
    compileOnly.extendsFrom(pluginImpl)
}


repositories {
    mavenLocal()
    maven {
        content {
            includeGroup "org.akazukin"
        }
        name = "GPR(Base-Plugin)"
        url = uri("https://maven.pkg.github.com/Akazukin-Team/Base-Plugin")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GPR_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GPR_TOKEN")
        }
    }
    mavenCentral()
    maven {
        name "spigot-repo"
        url "https://repo.rosewooddev.io/repository/public/"
    }
    maven {
        name 'geysermc'
        url "https://repo.opencollab.dev/main/"
    }
    maven {
        name "ProtocolSupport"
        url "https://repo.minebench.de/"
    }
    maven {
        url 'https://repo.codemc.io/repository/nms/'
    }
    maven {
        name "enginehub-maven" //worldedit
        url "https://maven.enginehub.org/repo"
    }
    maven {
        name "Jitpack"
        url "https://jitpack.io/"
    }
    maven {
        name = 'glaremasters repo'
        url = 'https://repo.glaremasters.me/repository/towny/'
    }
    maven {
        name = 'legacy NCP repo'
        url = 'https://repo.md-5.net/content/repositories/snapshots/'
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    compileOnly libs.lombok
    annotationProcessor libs.lombok

    compileOnly libs.akz.libs
    //compileOnly libs.doma.core


    //testImplementation libs.junit.jupiter
    //testRuntimeOnly libs.junit.platform
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    //options.compilerArgs << ''
}

java.toolchain.languageVersion = JavaLanguageVersion.of(properties.getOrDefault("java_version", 8) as int)
compileJava.sourceCompatibility = compileJava.targetCompatibility = properties.getOrDefault("java_version", 8)


tasks.named('test') {
    useJUnitPlatform()
}

java {
    withSourcesJar()
}

jar {
    dependsOn(sourcesJar)
    dependsOn(processResources)

    enabled = true
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(Tar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(Zip).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}